/********************************************************************************
 * Copyright (c) 2018 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
grammar hu.bme.mit.gamma.trace.language.TraceLanguage with hu.bme.mit.gamma.expression.language.ExpressionLanguage

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mit.bme.hu/gamma/trace/Model" 
import "http://www.mit.bme.hu/gamma/expression/Model" as ConstraintModel
import "http://www.mit.bme.hu/gamma/statechart/Model" as StatechartModel
import "platform:/resource/hu.bme.mit.gamma.statechart.model/model/statechart.ecore#//composite" as CompositeModel
import "platform:/resource/hu.bme.mit.gamma.statechart.model/model/statechart.ecore#//interface" as InterfaceModel 

ExecutionTrace returns ExecutionTrace:
	'import' ^import=[StatechartModel::Package | STRING]
	'trace' name=ID 'of' (component=[CompositeModel::Component] ('(' arguments+=Expression (',' arguments+=Expression)* ')')?)
	steps+=Step
	(steps+=Step)*
	(cycle=Cycle)?
;

Cycle returns Cycle:
	'cycle' '{'
		(steps+=Step)+
	'}'
;

Step returns Step:
	{Step}
	'step' '{'
		('act' '{'
			(actions+=Act)+
		'}')?
		'assert' '{'
			(outEvents+=RaiseEventAct)*
			('states' '{'
				(instanceStates+=InstanceState)? (',' (instanceStates+=InstanceState))*
			'}')?
		'}'
	'}'
;

Act returns Act:
	RaiseEventAct | TimeElapse | InstanceSchedule | ComponentSchedule;

RaiseEventAct returns RaiseEventAct:
	'raise' port=[StatechartModel::Port] '.' event=[InterfaceModel::Event] (':' arguments+=Expression)?
;

TimeElapse returns TimeElapse:
	'elapse' elapsedTime=INTEGER
;

InstanceSchedule returns InstanceSchedule:
	'schedule' scheduledInstance=[CompositeModel::AsynchronousComponentInstance]
;

ComponentSchedule returns ComponentSchedule:
	{ComponentSchedule}
	'schedule' 'component'
;

InstanceState returns InstanceState:
	InstanceStateConfiguration | InstanceVariableState
;

InstanceStateConfiguration returns InstanceStateConfiguration:
	instance=[CompositeModel::SynchronousComponentInstance] '.' state=[StatechartModel::State]
;


InstanceVariableState returns InstanceVariableState:
	instance=[CompositeModel::SynchronousComponentInstance] '.' declaration=[ConstraintModel::VariableDeclaration] '=' value=Expression
;
